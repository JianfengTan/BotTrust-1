{
  "name": "Google Code Jam: Bot Trust",
  "tagline": "Bot Trust Problem",
  "body": "[Submission/Project Link](https://code.google.com/codejam/contest/975485/dashboard)\r\n\r\n## Problem\r\nBlue and Orange are friendly robots. An evil computer mastermind has locked them up in separate hallways to test them, and then possibly give them cake.\r\n\r\nEach hallway contains 100 buttons labeled with the positive integers `{1, 2, ..., 100}`. Button `k` is always `k` meters from the start of the hallway, and the robots both begin at button 1. Over the period of one second, a robot can walk one meter in either direction, or it can press the button at its position once, or it can stay at its position and not press the button. To complete the test, the robots need to push a certain sequence of buttons in a certain order. Both robots know the full sequence in advance. How fast can they complete it?\r\n\r\nFor example, let's consider the following button sequence:\r\n```\r\n  O 2, B 1, B 2, O 4\r\n```\r\nHere, `O 2` means button 2 in Orange's hallway, `B 1` means button 1 in Blue's hallway, and so on. The robots can push this sequence of buttons in 6 seconds using the strategy shown below:\r\n\r\n|Time | Orange           | Blue             |\r\n|-----|------------------|------------------|\r\n|  1  | Move to button 2 | Stay at button 1 |\r\n|  2  | Push button 2    | Stay at button 1 |\r\n|  3  | Move to button 3 | Push button 1    |\r\n|  4  | Move to button 4 | Move to button 2 |\r\n|  5  | Stay at button 4 | Push button 2    |\r\n|  6  | Push button 4    | Stay at button 2 |\r\n\r\nNote that Blue has to wait until Orange has completely finished pushing `O 2` before it can start pushing `B 1`.\r\n\r\n## Input\r\nThe first line of the input gives the number of test cases, `T`. `T` test cases follow.\r\n\r\nEach test case consists of a single line beginning with a positive integer `N`, representing the number of buttons that need to be pressed. This is followed by `N` terms of the form \"`Ri Pi`\" where `Ri` is a robot color (always 'O' or 'B'), and `Pi` is a button position.\r\n\r\n## Output\r\nFor each test case, output one line containing \"Case #x: y\", where `x` is the case number (starting from 1) and `y` is the minimum number of seconds required for the robots to push the given buttons, in order.\r\n\r\n**Limits**\r\n\r\n1 ≤ **Pi** ≤ 100 for all i.\r\n\r\n**Small dataset**\r\n\r\n1 ≤ **T** ≤ 20.\r\n1 ≤ **N** ≤ 10.\r\n\r\n**Large dataset**\r\n\r\n1 ≤ **T** ≤ 100.\r\n1 ≤ **N** ≤ 100.\r\n\r\n## Sample\r\n\r\n```\r\nInput               Output\r\n3\r\n4 O 2 B 1 B 2 O 4   Case #1: 6\r\n3 O 5 O 8 B 100     Case #2: 100\r\n2 B 2 B 1           Case #3: 4\r\n```\r\n\r\n## Solution\r\n\r\n![Bot Trust GUI](Project2BotTrust.png)\r\n\r\n**Files**\r\n\r\n* [BotTrust.java](BotTrust.java)\r\n* [core/Config.java](core/Config.java)\r\n* [core/Bot.java](core/Bot.java)\r\n* [core/Gui.java](core/Gui.java)\r\n* [core/CodeJam.java](core/CodeJam.java)\r\n\r\n**Dataset**\r\n\r\n* Small [A-small-practice.in](A-small-practice.in)\r\n* Large [A-large-practice.in](A-large-practice.in)\r\n\r\n\r\n## Run Project using Terminal\r\n```sh\r\njavac BotTrust.java\r\njava BotTrust < A-small-practice.in > A-small-practice.out\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}